{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([{\n    title: '',\n    rating: 0\n  }, {\n    title: '',\n    rating: 0\n  }, {\n    title: '',\n    rating: 0\n  }]);\n  const [recommendations, setRecommendations] = useState('');\n  const [hasClickedRecommend, setHasClickedRecommend] = useState(false);\n  const handleSubmit = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/get-recommendations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // You can send movie data to your backend if needed\n        // body: JSON.stringify({ movies: movies })\n        body: JSON.stringify({\n          movies: movies\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setRecommendations(data.recommendations);\n        setHasClickedRecommend(true);\n      } else {\n        console.error('Failed to retrieve recommendations');\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n}\n_s(App, \"jDoAb5ln56wBkvJajzFFOXvCetQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","_s","movies","setMovies","title","rating","recommendations","setRecommendations","hasClickedRecommend","setHasClickedRecommend","handleSubmit","response","fetch","method","headers","body","JSON","stringify","ok","data","json","console","error","_c","$RefreshReg$"],"sources":["/Users/arnavakula/Code/learning/movie-recommender/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([\n    { title: '', rating: 0 },\n    { title: '', rating: 0 },\n    { title: '', rating: 0 }\n  ]);\n  const [recommendations, setRecommendations] = useState('');\n  const [hasClickedRecommend, setHasClickedRecommend] = useState(false);\n\n  const handleSubmit = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/get-recommendations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // You can send movie data to your backend if needed\n        // body: JSON.stringify({ movies: movies })\n        body: JSON.stringify({ movies: movies })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setRecommendations(data.recommendations);\n        setHasClickedRecommend(true);\n      } else {\n        console.error('Failed to retrieve recommendations');\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n}\n\nexport default App\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAElB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,CACnC;IAAEK,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAE,CAAC,EACxB;IAAED,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAE,CAAC,EACxB;IAAED,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAE,CAAC,CACzB,CAAC;EACF,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACS,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAErE,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACD;QACA;QACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf,MAAM,EAAEA;QAAO,CAAC;MACzC,CAAC,CAAC;MAEF,IAAIS,QAAQ,CAACO,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCb,kBAAkB,CAACY,IAAI,CAACb,eAAe,CAAC;QACxCG,sBAAsB,CAAC,IAAI,CAAC;MAC9B,CAAC,MAAM;QACLY,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAC;MACrD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;AACH;AAACrB,EAAA,CAhCQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAkCZ,eAAeA,GAAG;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}